#!/usr/bin/env python3

import argparse
import multiprocessing as mp
import pymysql

DEFAULT_MARIADB_PORT = 3306
DEFAULTS_FILE = "~/.my.cnf"
DEFAULTS_GROUP = "client"


def args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--hosts', required=True,
                        help=("Comma separated list of host:port"
                              "E.g. --hosts=host:port,host"))
    parser.add_argument('--defaults-file', default=DEFAULTS_FILE)
    parser.add_argument('--defaults-group', default=DEFAULTS_GROUP)
    parser.add_argument('sql')
    args = parser.parse_args()
    return [args.hosts, args.sql, args.defaults_file, args.defaults_group]


def queries(args: list = args()):
    hosts = list([h.split(':') for h in args[0].split(',')])
    sql = args[1][:-1] if args[1].endswith(";") else args[1]
    sql = sql.split(";")
    for h in hosts:
        if len(h) == 1:
            h.append(DEFAULT_MARIADB_PORT)
    q = list([(h[0], int(h[1]), sql) for h in hosts])
    return q


def query(hostname: str, port: int, sql: str):
    title = "{hostname}:{port}".format(hostname=hostname, port=port)
    local_results = []
    db = pymysql.connect(host=hostname,
                         port=port,
                         read_default_file=DEFAULTS_FILE,
                         read_default_group=DEFAULTS_GROUP)
    for s in sql:
        try:
            cur = db.cursor()
            cur.execute(s)
            desc = cur.description
            rows = cur.fetchall()
        finally:
            cur.close()
        if rows:
            headers = list([str(i[0]) for i in desc])
            local_results.append([title, headers, rows])
    db.close()
    for r in local_results:
        print_result(*r)
    return


def print_result(title, headers, rows):
    max_row_length = 32
    u = "".join(list(["-" for _ in range(0, max_row_length)]))
    print("{t}".format(t=title, u=u))
    print("{}".format("\t".join(headers)))
    for row in rows:
        r = "{}".format("\t".join((str(c) for c in row)))
        print(r)


def mqm(q=queries()):
    with mp.Pool() as pool:
        pool.starmap(query, q)


if __name__ == "__main__":
    mqm()
