#!/usr/bin/env python3

import os
import sys
import argparse
import multiprocessing as mp
from pprint import pprint as pp
import pymysql
import asyncio


DEFAULT_PORT = 3306
DEFAULTS_FILE = "~/.my.cnf"
DEFAULTS_GROUP = "client"
TASK_LIST = []
TASK_LOOP = asyncio.get_event_loop()


class db:
    def __init__(sql: str,
                 hostname: str,
                 port: int = DEFAULT_PORT,
                 read_default_file: str = DEFAULTS_FILE,
                 read_default_group: str = DEFAULTS_GROUP):
        self.sql = (sql[:-1] if sql.endswith(";") else args.sql).split(";")
        self.hostname = hostname
        self.port = port
        self.read_default_file = read_default_file
        self.read_default_group = read_default_group
        self.connect_kwargs = {'hostname': hostname,
                               'port': port,
                               'read_default_file': read_default_file,
                               'read_default_group': read_default_group}
        self.connect_kwargs['cursorclass'] = pymysql.cursors.DictCursor
        self.desc_query_desc = []
        self.query_results = []

    def connect(self):
        return pymysql.connect(**self.connect_kwargs)

    def query(self, sql: list):
        c = self.connect()
        cur = c.cursor()
        for q in sql:
            try:
                cur.execute(q)
                rows = cur.fetchall()
            finally:
                cur.close()
        if rows:
            if len(rows) == 1:
                self.query_results.append(rows[0])
            else:
                self.query_results.append(rows)
        else:
            return

    def print_result(self):
        return

    def print_all_results(self):
        return


def cli_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--hosts', required=True,
                        help=("Comma separated list of host:port"
                              "E.g. --hosts=host:port,host"))
    parser.add_argument('--defaults-file', default=DEFAULTS_FILE)
    parser.add_argument('--defaults-group', default=DEFAULTS_GROUP)
    parser.add_argument('sql')
    args = parser.parse_args()
    return args


def parse_cli_args(args=cli_args()):
    "Split by host, and create kwargs for db class."
    host_list = list([i.split(':') for i in args.hosts.split(',')])
    db_kwargs = []
    for host in host_list:
        h = {'sql': args.sql,
             'read_default_group': args.defaults_group,
             'read_default_file': args.defaults_file}
        if len(host) == 1:
            h['port'] = DEFAULT_PORT
        else:
            h['port'] == host[1]
        h['hostname'] = host[0]
        db_kwargs.append(h)
    return db_kwargs


def set_task_list(jobs=parse_cli_args()):
    pp(jobs)
    for i in jobs:
        pp(i)
        pp(i['sql'])
        TASK_LIST.append(db(**i))


async def query(j):
    j.query()


def run_task_list(tasks=TASK_LIST, loop=TASK_LOOP):
    i = iterator.map(query, tasks)
    loop.run_until_complete(asyncio.gather(*tasks))
    loop.close()


def print_task_results(tasks=TASK_LIST):
    for i in tasks:
        i.print_all_results()


def run():
    set_task_list()
    run_task_list()
    print_task_results()


run()

